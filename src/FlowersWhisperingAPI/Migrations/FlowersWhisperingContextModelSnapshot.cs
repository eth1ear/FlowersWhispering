// <auto-generated />
using System;
using FlowersWhisperingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace FlowersWhisperingAPI.Migrations
{
    [DbContext(typeof(FlowersWhisperingContext))]
    partial class FlowersWhisperingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("article_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("ArticleContent")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("article_content");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("article_title");

                    b.Property<string>("ArticleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("published_date");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("publisher_id");

                    b.HasKey("ArticleId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.CareLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("log_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("CareActivity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("care_activity");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("log_date");

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("CareLogs");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.CareReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("reminder_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(1)");

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("reminder_date");

                    b.Property<string>("ReminderText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("ReminderId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("CareReminders");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("comment_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("comment_content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("created_date");

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("favorite_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("FavoriteId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("feedback_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("feedback_content");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("submitted_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.MedicinalHerb", b =>
                {
                    b.Property<int>("HerbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("herb_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HerbId"));

                    b.Property<string>("MedicinalProperties")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("medicinal_properties");

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<string>("UsageInstructions")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("usage_instructions");

                    b.HasKey("HerbId");

                    b.HasIndex("PlantId");

                    b.ToTable("MedicinalHerbs");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("message_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("message_content");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("sent_date");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<string>("CareConditions")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("care_conditions");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("category");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("common_name");

                    b.Property<string>("GrowthEnvironment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("growth_environment");

                    b.Property<string>("Portrayal")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("portrayal");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("scientific_name");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.PlantImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("image_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("DiagnosisResult")
                        .HasColumnType("CLOB")
                        .HasColumnName("diagnosis_result");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("image_url");

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<string>("RecognitionResult")
                        .HasColumnType("CLOB")
                        .HasColumnName("recognition_result");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("upload_date");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("ImageId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantImages");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.PlantRegionSuitability", b =>
                {
                    b.Property<int>("SuitabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("suitability_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuitabilityId"));

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("region_name");

                    b.Property<string>("Suitability")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("suitability");

                    b.HasKey("SuitabilityId");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantRegionSuitability");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("review_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("ModifiedContent")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("modified_content");

                    b.Property<int>("PlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("plant_id");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("review_date");

                    b.Property<string>("ReviewStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("review_status");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("submitted_date");

                    b.Property<int>("SubmitterId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("submitter_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("PlantId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("user_id_seq.NEXTVAL");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("email");

                    b.Property<string>("LanguagePreference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("language_preference");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("registration_date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("user_role");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("user_status");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.UserActivityLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("log_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("activity_date");

                    b.Property<string>("ActivityDescription")
                        .IsRequired()
                        .HasColumnType("CLOB")
                        .HasColumnName("activity_description");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("group_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("created_date");

                    b.Property<int>("CreatorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("creator_id");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("group_name");

                    b.HasKey("GroupId");

                    b.HasIndex("CreatorId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.UserPoint", b =>
                {
                    b.Property<int>("PointsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("points_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointsId"));

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("last_updated");

                    b.Property<int>("Points")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("points");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    b.HasKey("PointsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPoints");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Article", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.CareLog", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.CareReminder", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Comment", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Favorite", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Feedback", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.MedicinalHerb", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Message", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.PlantImage", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.PlantRegionSuitability", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.Review", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersWhisperingAPI.Models.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.UserActivityLog", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.UserGroup", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("FlowersWhisperingAPI.Models.UserPoint", b =>
                {
                    b.HasOne("FlowersWhisperingAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
